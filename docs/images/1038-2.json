{"id":1038,"date":"2010-06-20T01:47:38","date_gmt":"2010-06-19T23:47:38","guid":{"rendered":"http:\/\/www.ordisoftware.com\/?page_id=1038"},"modified":"2022-05-10T16:09:53","modified_gmt":"2022-05-10T14:09:53","slug":"quality","status":"publish","type":"page","link":"https:\/\/www.ordisoftware.com\/en\/services\/consulting\/quality\/","title":{"rendered":"Quality charter"},"content":{"rendered":"<p style=\"margin-bottom:25px;\"><p><\/p>\n<h3><span id=\"Application_development\">Application development<\/span><\/h3>\n<p>Ordisoftware\u2122 communicate to you proposals and recommendations that are obtained by experience and that are sustained by an assessment highlighting suitable or unsuitable elements and critical areas of studied systems.<\/p>\n<p>Whatever the objectives to reach, the organizational and technological constraints, domains being considered, and activities being established.<\/p>\n<p>Three directions of action are put into practice to ensure the control of the work:<\/p>\n<ul>\n<li><em>Partnership<\/em> with the business decision-making team.<\/li>\n<li><em>Responsibility<\/em> of the expertise of technical solutions.<\/li>\n<li><em>Training and help <\/em>of the user\u2019s groups.<\/li>\n<\/ul>\n<p><img decoding=\"async\" class=\"aligncenter\" src=\"\/wp-content\/theming\/images\/consulting_control_en.png\" alt=\"\" \/><\/p>\n<p><a href=\"https:\/\/www.ordisoftware.com\/en\/services\/programs\/quality\/\">Steps to making software<\/a><\/p>\n<h3><span id=\"Methodology\">Methodology<\/span><\/h3>\n<p><a href=\"http:\/\/en.wikipedia.org\/wiki\/Agile_software_development\" target=\"_blank\" rel=\"noopener noreferrer\">Agile methods<\/a> are the result of the practice and the afterthought from the use of methods called \"traditional\" that they incorporate and expand based on the following notions :<\/p>\n<p><img decoding=\"async\" class=\"alignright\" style=\"margin: 40px 0 50px 20px;\" src=\"\/wp-content\/theming\/images\/consulting_deliverable.jpg\" alt=\"\" \/><\/p>\n<ul>\n<li><em>Iterative method<\/em> : the project is realized by compartments or portions, through the concepts of <a href=\"http:\/\/en.wikipedia.org\/wiki\/Object_(computer_science)\" target=\"_blank\" rel=\"noopener noreferrer\">objects<\/a>, <a href=\"http:\/\/en.wikipedia.org\/wiki\/Component-based_software_engineering\" target=\"_blank\" rel=\"noopener noreferrer\">components<\/a> and <a href=\"http:\/\/en.wikipedia.org\/wiki\/Library_(computing)\" target=\"_blank\" rel=\"noopener noreferrer\">packages<\/a>.<\/li>\n<li><em>Incremental method<\/em> : the project is realized by progression or refining, through the implementation of <a href=\"http:\/\/en.wikipedia.org\/wiki\/Abstraction_(computer_science)\" target=\"_blank\" rel=\"noopener noreferrer\">abstraction<\/a>, <a href=\"http:\/\/en.wikipedia.org\/wiki\/Polymorphism_(computer_science)\" target=\"_blank\" rel=\"noopener noreferrer\">polymorphism<\/a> and <a href=\"http:\/\/en.wikipedia.org\/wiki\/Generic_programming\" target=\"_blank\" rel=\"noopener noreferrer\">genericity<\/a>.<\/li>\n<\/ul>\n<hr width=\"100px\" \/>\n<ul>\n<li><em>Scenario<\/em> : these methods of production are based on unitary specifications of the fonctionalities that are derided into tasks or steps.<\/li>\n<li><em>Deliverable<\/em>: a functional application is frequently and regularly builds to lead the advance of these methods, <span id=\"result_box\" class=\"\" lang=\"en\"><span class=\"\">from the initial<\/span> model until the last prototype that became the final software<\/span>.<\/li>\n<\/ul>\n<p><a href=\"http:\/\/en.wikipedia.org\/wiki\/Agile_software_development\" target=\"_blank\" rel=\"noopener noreferrer\">Agile methods<\/a> rely on four basic values in order to master architectures:<\/p>\n<ul>\n<li><em>Interaction<\/em>: communication has priority over methods and tools.<\/li>\n<li><em>Result<\/em>: a program that works has priority over documentation.<\/li>\n<li><em>Adaptability<\/em>: regular participation has priority over negotiations.<\/li>\n<li><em>Improvement<\/em>: changing has priority over planning.<\/li>\n<\/ul>\n<p style=\"margin: 0;\"><img decoding=\"async\" class=\"aligncenter\" src=\"\/wp-content\/theming\/images\/consulting_mastering_en.png\" alt=\"\" \/><\/p>\n<p>These values are detailed in twelve principles:<\/p>\n<ul>\n<li><em>Satisfaction of the result <\/em>: priority is to deliver useful software to the user.<\/li>\n<li><em>Improvement<\/em>: ability to change is a competitive advantage.<\/li>\n<li><em>Feedback<\/em>: action is based on the regular delivery and the user response.<\/li>\n<li><em>Contribution<\/em>: the different specialized contributors are regularly solicited.<\/li>\n<li><em>Motivation<\/em>: environment and support are essential to success.<\/li>\n<li><em>Interaction<\/em>: communication is the way of transmitting information.<\/li>\n<li><em>Usability<\/em>: software that works is the indicator of progress.<\/li>\n<li><em>Efficiency<\/em>: adopting a comfortable rhythm is the way to get the result.<\/li>\n<li><em>Aptitude<\/em>: expertise and quality are continuously evaluated.<\/li>\n<li><em>Pragmatism<\/em>: simplicity is even more essential that the project is complex.<\/li>\n<li><em>Organization<\/em>: sharing of activities provides the best software.<\/li>\n<li><em>Adaptability<\/em>: mutual and regularly introspection about the effectiveness adjusts the behavior of the team.<\/li>\n<\/ul>\n<p style=\"margin: 0;\"><img decoding=\"async\" class=\"aligncenter\" src=\"\/wp-content\/theming\/images\/consulting_principles_en.png\" alt=\"\" \/><\/p>\n<p>The project is usually approached from four considerations and five viewpoints:<\/p>\n<ul>\n<li><em>Business <\/em>&amp; <em>Use cases<\/em>: actors and scenarios.<\/li>\n<li><em>Information<\/em> &amp; <em>Design<\/em>: models and databases.<\/li>\n<li><em>Application<\/em> &amp; <em>Implementation<\/em>: static and dynamic aspects.<\/li>\n<li><em>Technology<\/em> &amp; <em>Deployment and process<\/em>: infrastructure and components.<\/li>\n<\/ul>\n<p style=\"margin: 0;\"><img decoding=\"async\" class=\"aligncenter\" src=\"\/wp-content\/theming\/images\/consulting_project_en.png\" alt=\"\" \/><\/p>\n<h3><span id=\"Modeling\">Modeling<\/span><\/h3>\n<p><img decoding=\"async\" class=\"alignright\" style=\"margin: 2px 0 0px 20px;\" src=\"\/wp-content\/theming\/images\/consulting_models.jpg\" alt=\"\" \/>Whether thanked or represented, models precede, underlie, document and validate the production of software of quality.<\/p>\n<p>The use of relational and object-oriented modeling brings simplicity, clarity and modularity in the conceptual representation of real things.<\/p>\n<p>Ordisoftware\u2122 usually uses the\u00a0<a href=\"https:\/\/en.wikipedia.org\/wiki\/Entity%E2%80%93relationship_model\" target=\"_blank\" rel=\"noopener noreferrer\">Entity\u2013relationship model<\/a> and the <a href=\"http:\/\/en.wikipedia.org\/wiki\/Unified_Modeling_Language\" target=\"_blank\" rel=\"noopener noreferrer\">UML<\/a> standard to specify and visualize structures, functions and interactions of systems.<\/p>\n<p>To obtain the desired result, the modeling and the implementation are continuously set in correspondence.<\/p>\n<p>The constant review of models and code, associated with the <a href=\"http:\/\/en.wikipedia.org\/wiki\/Code_refactoring\" target=\"_blank\" rel=\"noopener noreferrer\">refactoring<\/a>, are essential methods to success.<\/p>\n<h3><span id=\"Management\">Management<\/span><\/h3>\n<p><img decoding=\"async\" class=\"alignright\" style=\"margin: 2px 0 0px 20px;\" src=\"\/wp-content\/theming\/images\/consulting_improve.jpg\" alt=\"\" \/>As the mutation of the classical programming to <a href=\"http:\/\/en.wikipedia.org\/wiki\/Object-oriented_programming\" target=\"_blank\" rel=\"noopener noreferrer\">object-oriented programming<\/a> has taken time to mature, since the creation of <a href=\"http:\/\/en.wikipedia.org\/wiki\/Punched_card\" target=\"_blank\" rel=\"noopener noreferrer\">punch cards<\/a>, many <a href=\"http:\/\/en.wikipedia.org\/wiki\/Agile_software_development\" target=\"_blank\" rel=\"noopener noreferrer\">Agile methods<\/a> are developed based on the sensitivity of their creators and depending on industrial requirements.<\/p>\n<ul>\n<li><a href=\"https:\/\/en.wikipedia.org\/wiki\/Rapid_application_development\" target=\"_blank\" rel=\"noopener noreferrer\">Rapid Application Development (1991)<\/a>*: Based on an analysis-design-construction iterative cycle to build a deliverable every 3-4 months by independent teams.<\/li>\n<\/ul>\n<ul>\n<li><a href=\"https:\/\/en.wikipedia.org\/wiki\/Unified_Process\" target=\"_blank\" rel=\"noopener noreferrer\">Unified Process (1996)<\/a>*: Based on use cases, focused on UML architectural views, driven by iterative and incremental methods.<\/li>\n<\/ul>\n<ul>\n<li><a href=\"https:\/\/en.wikipedia.org\/wiki\/Extreme_programming\" target=\"_blank\" rel=\"noopener noreferrer\">Extreme Programming (1999)<\/a>*: Based on the construction of the application, with very short delivery cycles, the privileged integration of the customer into the team, and the use of specific coding techniques (simplicity, refactoring, conventions, common vocabulary, unit testing, pair programming, shared code, continuous integration, respect of reality and constraints).<\/li>\n<\/ul>\n<ul>\n<li><a href=\"https:\/\/en.wikipedia.org\/wiki\/Object-oriented_analysis_and_design\" target=\"_blank\" rel=\"noopener noreferrer\">Object-oriented applications analysis and design method (2003)<\/a>*: <span id=\"result_box\" class=\"\" lang=\"en\"><span class=\"\">UP<\/span> simplification associated with RAD focused on GUI and UML to define the structures <span class=\"\">and functions of the<\/span> system and to achieve an incremental application prototyping.<\/span><\/li>\n<\/ul>\n<ul>\n<li><span id=\"result_box\" class=\"\" lang=\"en\"><\/span><a href=\"https:\/\/en.wikipedia.org\/wiki\/Kanban_(development)\" target=\"_blank\" rel=\"noopener noreferrer\">Kanban (2010)<\/a>*: \u00a0Inspired by Lean for the process management, focused on the organization, the communication and the knowledge.<\/li>\n<\/ul>\n<ul>\n<li><span id=\"result_box\" class=\"\" lang=\"en\"><a href=\"https:\/\/en.wikipedia.org\/wiki\/Dynamic_systems_development_method\" target=\"_blank\" rel=\"noopener noreferrer\">Dynamic Systems Development Method (1995)<\/a>: Structured development cycle by extension of RAD, with a higher frequency of delivery controlled by tests.<\/span><\/li>\n<\/ul>\n<ul>\n<li><a href=\"https:\/\/en.wikipedia.org\/wiki\/Feature-driven_development\" target=\"_blank\" rel=\"noopener noreferrer\">Feature Driven Development (1999)<\/a>: Similar to RAD, with priority to features that deliver value, and the use of five activities (develop overall model, build feature list, plan by feature, design by feature, build by feature).<\/li>\n<\/ul>\n<ul>\n<li><a href=\"https:\/\/en.wikipedia.org\/wiki\/Scrum_%28software_development%29\" target=\"_blank\" rel=\"noopener noreferrer\">Scrum (2001)<\/a>: Based on the goal and the complexity of the project goal according to the philosophy of rugby.<\/li>\n<\/ul>\n<ul>\n<li><a href=\"https:\/\/en.wikipedia.org\/wiki\/Crystal_Clear_(software_development)\" target=\"_blank\" rel=\"noopener noreferrer\">Lean Software Development (2003)<\/a>: Based on eliminating waste, learning, on quality, fast return of delivery, later decision making, power given to the team, and overall vision.<\/li>\n<\/ul>\n<ul>\n<li><a href=\"https:\/\/en.wikipedia.org\/wiki\/Crystal_Clear_%28software_development%29\" target=\"_blank\" rel=\"noopener noreferrer\">Crystal Clear (2004)<\/a>: Based on communication and collaboration, for small projects.<\/li>\n<\/ul>\n<p style=\"text-align: left; margin-left: 15px;\"><em><span style=\"font-size: 11px;\">* Methods used preferentially by Ordisoftware\u2122<\/span><\/em><\/p>\n<h3><span id=\"More_information\">More information<\/span><\/h3>\n<ul>\n<li><a href=\"https:\/\/www.ordisoftware.com\/en\/services\/consulting\/prices\/\">Prices and rates<\/a><\/li>\n<li><a href=\"https:\/\/www.ordisoftware.com\/en\/business\/\">Business profile<\/a><\/li>\n<li><a href=\"https:\/\/www.ordisoftware.com\/en\/services\/\">Services offer<\/a><\/li>\n<li><a href=\"https:\/\/www.ordisoftware.com\/en\/services\/information-brochure\/\">Information brochure<\/a><\/li>\n<li><a href=\"https:\/\/www.ordisoftware.com\/en\/contact\/estimate\/\">Estimate<\/a><\/li>\n<\/ul>\n<p><\/p>\n<\/p>","protected":false},"excerpt":{"rendered":"<p>Assessment highlighting suitable elements and critical areas of systems through business partnership, technical responsibility and user support. <\/p>\n<p><span style=\"color:#333\"> &rarr; <a href=\"https:\/\/www.ordisoftware.com\/en\/services\/consulting\/quality\/\">Read next<\/a><\/span><\/p>\n","protected":false},"author":1,"featured_media":0,"parent":54,"menu_order":17,"comment_status":"closed","ping_status":"closed","template":"","meta":[],"_links":{"self":[{"href":"https:\/\/www.ordisoftware.com\/en\/wp-json\/wp\/v2\/pages\/1038"}],"collection":[{"href":"https:\/\/www.ordisoftware.com\/en\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.ordisoftware.com\/en\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.ordisoftware.com\/en\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.ordisoftware.com\/en\/wp-json\/wp\/v2\/comments?post=1038"}],"version-history":[{"count":0,"href":"https:\/\/www.ordisoftware.com\/en\/wp-json\/wp\/v2\/pages\/1038\/revisions"}],"up":[{"embeddable":true,"href":"https:\/\/www.ordisoftware.com\/en\/wp-json\/wp\/v2\/pages\/54"}],"wp:attachment":[{"href":"https:\/\/www.ordisoftware.com\/en\/wp-json\/wp\/v2\/media?parent=1038"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}