{"id":7879,"date":"2021-09-03T20:40:30","date_gmt":"2021-09-03T18:40:30","guid":{"rendered":"https:\/\/www.ordisoftware.com\/?p=7879"},"modified":"2022-06-17T14:36:12","modified_gmt":"2022-06-17T12:36:12","slug":"what-is-polymorphism-in-oop","status":"publish","type":"post","link":"https:\/\/www.ordisoftware.com\/blog\/2021\/09\/what-is-polymorphism-in-oop\/","title":{"rendered":"Qu'est-ce que le polymorphisme en POO ?"},"content":{"rendered":"<p style=\"margin-bottom:25px;\"><p><a href=\"https:\/\/en.wikipedia.org\/wiki\/Polymorphism_(computer_science)\" target=\"_blank\" rel=\"noopener\">Polymorphism<\/a>\u00a0in <a href=\"https:\/\/en.wikipedia.org\/wiki\/Object-oriented_programming\" target=\"_blank\" rel=\"noopener\">OOP Theory<\/a> is the ability to:<\/p>\n<ul>\n<li>Invoke an operation on an instance of a specialized type by only knowing its generalized type while calling the method of the specialized type and not that of the generalized type: this is <em>dynamic polymorphism<\/em>.<\/li>\n<\/ul>\n<ul>\n<li>Define several methods having the save name but having differents parameters: this is <em>static polymorphism<\/em>.<\/li>\n<\/ul>\n<p>The first if the historical definition and the most important.<\/p>\n<p><!--more--><\/p>\n<p>It allows to create <a href=\"https:\/\/en.wikipedia.org\/wiki\/Strong_and_weak_typing\" target=\"_blank\" rel=\"noopener\">strongly-typed<\/a> consistency of the class hierarchy and to do some <em>magical<\/em> things like managing lists of objects of differents types without knowing their types but only one of their parent type, as well as data bindings.<\/p>\n<p>Here are some Shapes like Point, Line, Rectangle and Circle having the operation Draw() taking either nothing or either a parameter to set a timeout to erase it.<\/p>\n<pre><code>public class Shape\r\n{\r\n public virtual void Draw()\r\n {\r\n   DoNothing();\r\n }\r\n public virtual void Draw(int timeout)\r\n {\r\n   DoNothing();\r\n }\r\n}\r\n\r\npublic class Point : Shape\r\n{\r\n int X, Y;\r\n public override void Draw()\r\n {\r\n   DrawThePoint();\r\n }\r\n}\r\n\r\npublic class Line : Point\r\n{\r\n int Xend, Yend;\r\n public override Draw()\r\n {\r\n   DrawTheLine();\r\n }\r\n}\r\n\r\npublic class Rectangle : Line\r\n{\r\n public override Draw()\r\n {\r\n   DrawTheRectangle();\r\n }\r\n}\r\n\r\nvar shapes = new List&lt;Shape&gt;\r\n{ \r\n  new Point(0,0),\r\n  new Line(0,0,10,10),\r\n  new rectangle(50,50,100,100)\r\n};\r\n\r\nforeach ( var shape in shapes )\r\n  shape.Draw();\r\n<\/code><\/pre>\n<p>Here the Shape class and the Shape.Draw() methods should be marked as abstract.<\/p>\n<p>They are not for to make understand.<\/p>\n<p>Without polymorphism, using abstract-virtual-override, while parsing the shapes, it is only the Spahe.Draw() method that is called as the CLR don't know what method to call. So it call the method of the type we act on, and here the type is Shape because of the list declaration. So the code do nothing at all.<\/p>\n<p>With polymorphism, the CLR is able to <a href=\"https:\/\/en.wikipedia.org\/wiki\/Type_inference\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">infer<\/a> the real type of the object we act on using what is called a virtual table. So it call the <em>good<\/em> method, and here calling Shape.Draw() if Shape is Point calls the Point.Draw(). So the code draws the shapes.<\/p>\n<h4>Links<\/h4>\n<ul>\n<li><a href=\"https:\/\/en.wikipedia.org\/wiki\/Virtual_method_table\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Virtual method table<\/a><\/li>\n<li><a href=\"https:\/\/www.tutorialspoint.com\/csharp\/csharp_polymorphism.htm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">C# Polymorphism (Level 1)<\/a><\/li>\n<li><a href=\"https:\/\/www.guru99.com\/java-inheritance-polymorphism.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Polymorphism in Java (Level 2)<\/a><\/li>\n<li><a href=\"https:\/\/docs.microsoft.com\/dotnet\/csharp\/programming-guide\/classes-and-structs\/polymorphism\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Polymorphism (C# Programming Guide)<\/a><\/li>\n<li><a href=\"https:\/\/www.ordisoftware.com\/blog\/2021\/09\/how-to-improve-your-knowledge-of-csharp\/\">How to improve your knowledge of C#<\/a><\/li>\n<\/ul>\n<p style=\"text-align: right;\"><span style=\"text-decoration: underline; color: #808080;\"><a style=\"color: #808080;\" href=\"https:\/\/stackoverflow.com\/a\/58197730\/12031933\" target=\"_blank\" rel=\"noopener\">CC BY-SA 4.0 Original Post<\/a><\/span><\/p>\n<\/p>","protected":false},"excerpt":{"rendered":"<p style=\"margin-bottom:25px;\">\n<p>Polymorphism in OOP Theory is the ability to:<\/p>\n<p> Invoke an operation on an instance of a specialized type by only knowing its generalized type while calling the method of the specialized type and not that of the generalized type: this is dynamic polymorphism. Define several methods having the save name but having differents parameters: this is static polymorphism. <\/p>\n<p>The first if the historical definition and the most important.<\/p>\n<p><span style=\"color:#333\"> &rarr; <a href=\"https:\/\/www.ordisoftware.com\/blog\/2021\/09\/what-is-polymorphism-in-oop\/\">Lire la suite<\/a><\/span><\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[54],"tags":[],"jetpack_featured_media_url":"","_links":{"self":[{"href":"https:\/\/www.ordisoftware.com\/wp-json\/wp\/v2\/posts\/7879"}],"collection":[{"href":"https:\/\/www.ordisoftware.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.ordisoftware.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.ordisoftware.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.ordisoftware.com\/wp-json\/wp\/v2\/comments?post=7879"}],"version-history":[{"count":0,"href":"https:\/\/www.ordisoftware.com\/wp-json\/wp\/v2\/posts\/7879\/revisions"}],"wp:attachment":[{"href":"https:\/\/www.ordisoftware.com\/wp-json\/wp\/v2\/media?parent=7879"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.ordisoftware.com\/wp-json\/wp\/v2\/categories?post=7879"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.ordisoftware.com\/wp-json\/wp\/v2\/tags?post=7879"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}