{"id":7912,"date":"2021-09-04T10:15:02","date_gmt":"2021-09-04T08:15:02","guid":{"rendered":"https:\/\/www.ordisoftware.com\/?p=7912"},"modified":"2021-09-04T15:07:59","modified_gmt":"2021-09-04T13:07:59","slug":"what-are-classes-and-interfaces-in-c","status":"publish","type":"post","link":"https:\/\/www.ordisoftware.com\/blog\/2021\/09\/what-are-classes-and-interfaces-in-c\/","title":{"rendered":"Que sont les classes et les interfaces en C# ?"},"content":{"rendered":"<p style=\"margin-bottom:25px;\"><p>Interfaces are to make an abstraction, an archetype, of the abstraction, the classes, of the reality, the objects.<\/p>\n<p>Interfaces are to specify contract terms without providing implementation provided by classes.<\/p>\n<p><!--more--><\/p>\n<p>Interfaces are specifications:<\/p>\n<ul>\n<li><em>Interfaces are design time artifacts to specify the immobile behavior of the concept as it is alone and static.<\/em><\/li>\n<\/ul>\n<ul>\n<li><em>Classes are implementation time artifacts to specify the mobile structure of the reality as it interacts and move.<\/em><\/li>\n<\/ul>\n<h4>What is an interface?<\/h4>\n<p>When we observe a cat we can say that it is an animal that has four paws, a head, a trunk, a tail and hair. We can see that he can walk, run, eat and meow. And so on.<\/p>\n<p>We have just defined an interface with its properties and its operations. As such we have not defined any modus operandi, but only features and capabilities without knowing how things work: we have defined abilities and distinctions.<\/p>\n<p>As such it is not really yet a class even though in UML we call this a class in a class diagram because we can define privates and protected members to begin having a deep view of the artifact. Do not be confused here because in UML an interface is a slightly different thing that an interface in C#: it is like a partial access point to the abstraction atom. As such we said that a class can implements multiple interfaces. As such it is the same thing, but not, because interfaces in C# are both used to abstract the abstraction and to limit this abstraction as an access point. It's two different uses. Thus a class in UML represents a full coupling interface to a programming class, whereas an UML interface represents a decoupling interface of a section of a programming class. Indeed, the class diagram in UML does not take care of the implementation and all its artifacts are at the programming interface level. While we map UML classes to programming classes, it is a transposition of abstract abstraction into concrete abstraction. There is a subtlety that explains the dichotomy between the field of design and the field of programming. So a class in UML is a programming class from the point of view of a programming interface while considering inner hidden things.<\/p>\n<p>Interfaces also allow to simulate multiple inheritance when not available in an awkward way. For example, the cat class will implement the cat interface that derives itself from the animal interface. This cat class will also implement these interfaces: walk, run, eat and make a sound. This compensates for the absence of multiple inheritance at the class level, but each time we need to reimplement everything and we can not factor the reality at best like the reality itself do it.<\/p>\n<p>To understand that we can refer to Pascal Object coding where we define in a unit the interface and the implementation sections. In the interface we define the types and in the implementation we implement the type:<\/p>\n<pre class=\"lang-delphi s-code-block\"><code class=\"hljs language-delphi\">unit UnitName;\r\n\r\ninterface\r\n\r\ntype\r\n  TheClass = class\r\n    public\r\n      procedure TheMethod;\r\n  end;\r\n\r\nimplementation\r\n\r\nclass procedure TheClass.TheMethod;\r\nbegin\r\nend;\r\n<\/code><\/pre>\n<p>Here, the interface section match to the UML class design while Interfaces types are thus others things.<\/p>\n<p>So in our business we have one word, <em>interface<\/em>, to nominate two distinct but similar things, and it is a source of confusion.<\/p>\n<p>Also in C# for example, programming interfaces allow to compensate the absence of true generic polymorphism on open types without really succeeding the goal because we lost the strongly-typed hability.<\/p>\n<p>After all, interfaces are necessary to allow incompatible systems to communicate without worrying about the implementation and the management of objects in memory like introduced with the (Distributed) Common Object Model.<\/p>\n<h4>What is a class?<\/h4>\n<p>After defining a reduction of the reality from an external point of view, we can then describe it from an inside perspective: this is the class where we define data processing and message management to allow the reality we have encapsulated to come to life and interact thanks to objects using instances.<\/p>\n<p>Thus in UML we realize a fractal immersion in the wheels of the machinery and we describe the states, the interactions and so on to be be able to implement the abstraction of the fragment of the reality we want to handle.<\/p>\n<p>As such, an abstract class is somehow the equivalent of an interface from the point of view of the compiler.<\/p>\n<h4>Links<\/h4>\n<ul>\n<li><a href=\"https:\/\/www.ordisoftware.com\/blog\/2021\/09\/how-to-improve-your-knowledge-of-csharp\/\">How to improve your knowledge of C#<\/a><\/li>\n<\/ul>\n<p style=\"text-align: right;\"><span style=\"color: #808080;\"><a style=\"color: #808080;\" href=\"https:\/\/stackoverflow.com\/a\/58174007\/12031933\" target=\"_blank\" rel=\"noopener\">CC BY-SA 4.0 Original Post<\/a><\/span><\/p>\n<\/p>","protected":false},"excerpt":{"rendered":"<p style=\"margin-bottom:25px;\">\n<p>Interfaces are to make an abstraction, an archetype, of the abstraction, the classes, of the reality, the objects.<\/p>\n<p>Interfaces are to specify contract terms without providing implementation provided by classes.<\/p>\n<p><span style=\"color:#333\"> &rarr; <a href=\"https:\/\/www.ordisoftware.com\/blog\/2021\/09\/what-are-classes-and-interfaces-in-c\/\">Lire la suite<\/a><\/span><\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[54],"tags":[],"jetpack_featured_media_url":"","_links":{"self":[{"href":"https:\/\/www.ordisoftware.com\/wp-json\/wp\/v2\/posts\/7912"}],"collection":[{"href":"https:\/\/www.ordisoftware.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.ordisoftware.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.ordisoftware.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.ordisoftware.com\/wp-json\/wp\/v2\/comments?post=7912"}],"version-history":[{"count":0,"href":"https:\/\/www.ordisoftware.com\/wp-json\/wp\/v2\/posts\/7912\/revisions"}],"wp:attachment":[{"href":"https:\/\/www.ordisoftware.com\/wp-json\/wp\/v2\/media?parent=7912"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.ordisoftware.com\/wp-json\/wp\/v2\/categories?post=7912"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.ordisoftware.com\/wp-json\/wp\/v2\/tags?post=7912"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}